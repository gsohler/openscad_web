{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started with Python-powered OpenSCAD","text":""},{"location":"#enabling-python-support","title":"Enabling Python support","text":"<p>For Python support to be enabled, this  must be met:</p> <p>The extension of the file you're editing MUST be <code>.py</code>.</p> <p>If this is met, then the file will be interpreted as a Python file.</p>"},{"location":"#differences-with-regular-openscad","title":"Differences with regular OpenSCAD","text":"<p>If you're familiar with regular OpenSCAD, then the synthax will be fairly obvious, as the names of functions and classes are the same.</p> <p>The major difference is that you need to use the <code>show()</code> function for a shape to be displayed, as opposed to it being displayed automatically in regular OpenSCAD. As for every python library, you need to  import the functions with 'import'. Put this in the beginning of each script.</p>"},{"location":"#creating-a-basic-shape","title":"Creating a basic shape","text":"<p>Lets create a 5x5x5 cube.</p> Python <pre><code># getting openscad functions into namespace\nfrom openscad import *\n# Create the cube object, and store it in variable \"c\"\nc = cube(5)\n# Or, more explicitely\nc = cube([5,5,5])\n# Display the cube\nshow(c)\n</code></pre> OpenSCAD <pre><code>// Create the cube object\ncube(5);\n// Or, more explicitely\ncube([5,5,5]);\n// The cube is displayed implicitely\n</code></pre> <p>That was pretty easy! Next, let's see how to combine multiple shapes.</p>"},{"location":"combining_objects/","title":"Combining objects","text":""},{"location":"combining_objects/#displaying-multiple-shapes","title":"Displaying multiple shapes","text":"<p>If you tried calling show a second time, you will have noticed that is overwrites the previous call. For example: <pre><code>from openscad import *\n# Create a cube and a cylinder\ncu = cube([5,5,5])\ncy = cylinder(5)\n# We display the cube\nshow(cu)\n# We display the cylinder, which overwrites the previous show call\n# THE CUBE IS NO LONGER DISPLAYED\nshow(cy)\n</code></pre></p> <p>So how do we display multiple shapes? Simple! We pass them all to the show function using a list: <pre><code>from openscad import *\n# Create a cube and a cylinder\ncu = cube([5,5,5])\ncy = cylinder(5)\n# Both objects are now displayed at once\nshow([cu,cy])\n</code></pre></p>"},{"location":"combining_objects/#combining-objects-with-union","title":"Combining objects with <code>union()</code>","text":"<p>Lets say you wanted to merge 2 objects into one, how could you do that? Well, you combine them with the <code>union()</code> method:</p> Python <pre><code>from openscad import *\n# Create a cube and a cylinder\ncu = cube([5,5,5])\ncy = cylinder(5)\n# Create a third object that is a fusion of the cube and the cylinder\nfusion = cu.union(cy)\n# alternatively you can also write:\nfusion = union([cu, cy])\n# Display the new object\nshow(fusion)\n</code></pre> OpenSCAD <pre><code>// Join the 2 objects into one\nunion() {    // Create a cube and a cylinder\ncube([5,5,5]);\ncylinder(5);\n}\n</code></pre> <p>One important thing to note is the fact the <code>union()</code> does NOT edit the objects in place. Rather, it creates a third brand new object. This means that:</p> <ul> <li>You must assign the union to a variable, just calling <code>cu.union(cy)</code> alone will have no effects on <code>cu</code> or <code>cy</code>.</li> <li>You keep access to the originals objects. For example, you could still display just the cube by using <code>show(cu)</code></li> </ul>"},{"location":"combining_objects/#substracting-objects-with-difference","title":"Substracting objects with <code>difference()</code>","text":"<p>You learned how to merge two objects into one, but what if you want to exclude an object from another? For that, you can use the <code>difference()</code> method:</p> Python <pre><code>from openscad import *\n# Create a cube and a cylinder that overlap\ncu = cube([5,5,5], center = True)\ncy = cylinder(15, center = True)\n# Substract the cylinder from the cube\ndiff = cu.difference(cy)\n# Display the result\nshow(diff)\n</code></pre> OpenSCAD <pre><code>// Use difference() to substract the cylinder from the cube\ndifference() {\n// Create a cube and a cylinder that overlap\ncube([5,5,5], center = true);\ncylinder(15, center = true);\n}\n</code></pre> <p>As you can see, this creates a cylinder-shaped hole in the cube!</p>"},{"location":"combining_objects/#using-operators","title":"Using operators","text":"<p>Using the <code>union</code> and <code>difference</code> method works great, but is a little heavy synthax-wise. You can instead simplify it by using operators! Operators can also be used to easily translate or scale solid</p> <p>Here is a table detailing which operator matches each method:</p> Operator Method | union two solids - difference two solids &amp; intersection of two solids * scale an solid with a value or a vector + translate an solid with a vector <p>So, reusing our earlier examples, you could write <pre><code>from openscad import *\ncu = cube([5,5,5])\ncy = cylinder(5)\n# Replaces cu.union(cy)\nfusion = cu | cy\nshow(fusion)\n</code></pre></p> <p>There are some more conveniance function to translate or rotate objects.</p> <pre><code>from openscad import *\nobj1 = cube(10)\nobj2=cylinder(r=1,h=2)\nresult = obj1.right(1).down(2) # directions are right, left, front, back, up, down\nresult2 = obj2.rotz(30) # 30 degrees, there is rotx, roty, rotz\n</code></pre> <p>Now that we know how to combine objects, lets see how we can position them.</p>"},{"location":"positioning_objects/","title":"Positioning objects","text":"<p>To move an object, you can simply use the <code>translate()</code> method:</p> PythonOpenSCAD <pre><code>from openscad import *\n# Create two cubes\nc1 = cube([5,5,5])\nc2 = cube([3,3,10])\n# Translate the cube by 7 units up\nc2 = c2.translate([0,0,7])\n# Display the result\nresult = c1 | c2\nshow(result)\n</code></pre> <pre><code>// Create the first cube\ncube([5,5,5]);\n// Create the second cube, and apply\n// a translation of 7 units up\ntranslate([0,0,7])\ncube([3,3,10]);\n</code></pre> <p>Notice how we assign the result of the <code>translate()</code> method back into c2. This is because just like the <code>union()</code> and <code>difference()</code> methods we saw earlier, this method return a brand new object.</p> <p>Another option to  position an object is to rotate it. You can do that with the 'rotate()'  method.</p> Python <pre><code>from openscad import *\n# Create a cube\nc = cube([5,5,5])\nrotated=c.rotate([10,0,-30])\n# rotate 10 degrees around X axis, not in Y and -30 around Z axis finally\nshow(rotated)\n</code></pre> OpenSCAD <pre><code>// rotate 10 degrees around X axis, not in Y and -30 around Z axis finally\nrotate([10,0,-30])\ncube([5,5,5]);\n</code></pre> <p>One advantage of python language over the OpenSCAD is that you specify the build processes in several tiny steps without having to use  hierarchy</p> <p>Lets now spot the tiny differences between openSCAD and python here.</p>"},{"location":"python_new/","title":"New Functions in PythonSCAD","text":"<p>OpenSCAD already got a rich set of functions, however, there could be some more ...</p>"},{"location":"python_new/#divmatrix","title":"divmatrix","text":"<p>Sometimes its helpful to use multmatrix with the inverse of a matrix. Why don't use divmatrix right from the beginning ?</p> <pre><code>from openscad import *\nmat=[[1,0,0,10],[0,1,0,0],[0,0,1,0],[0,0,0,1]] # Move to the right by 10\na=cube([1,1,1])\nb=a.multmatrix(mat) # move to right\nc=b.divmatrix(mat) # move back left\nc.show()\n</code></pre>"},{"location":"python_new/#mesh","title":"mesh","text":"<p>With mesh function you can convert solid to a set of vertices and triangles like so:</p> <pre><code>from openscad import *\nu=cube([1,1,1]) | cylinder(d=1,h=10)\npts, tris = u.mesh()\n# Now you could use the pts for further processing or even manipulate them and do this ...\nv = polyhedron(pts, tris)\nv.show()\n</code></pre>"},{"location":"python_new/#path_extrude","title":"path_extrude","text":"<p>OpenSCAD has linear_extrude to move along a straight line and rotate_extrude to extrude along an arc. But there is nothing which can extrude along an arbritary line. This is reason to create path_extrude. With path_extrude you can extrude any shape along a path given by points. A 4th parameter in a vertex means the radius in this  corner</p> <pre><code>from openscad import *\np=path\\_extrude(square(1),[[0,0,0],[0,0,10,3], [10,0,10,3],[10,10,10]]);\nshow(p);\n</code></pre>"},{"location":"python_new/#quick-transformations","title":"quick transformations","text":"<pre><code>Sometime translate or rotate is quite a burden to write when you just want to change one coordinate and still have to specify 3 values in the transformation\n</code></pre> <pre><code>from openscad import *\n# these are easier to write instead specifying full translate or rotate\nobj=cube(2)\npart1 = obj.right(2.5)\npart2 = obj.left(2.5)\npart3 = obj.up(2.5)\npart4 = obj.down(2.5)\npart5 = obj.front(2.5)\npart6 = obj.back(2.5)\npart7 = obj.rotx(90)\npart8 = obj.roty(135)\npart9 = obj.rotz(-45)\npart5.show()\n</code></pre>"},{"location":"python_new/#pulling-objects-apart","title":"pulling objects apart","text":"<p>Sometimes its helpful to alter an existings STL and just adjust dimensions, whowever scale is not the right approach because you  only want the new dimension just on one place, not all over the object. This is where pull can be helpful pull defines one point one direction where it inserts  \"void\"  right into the spanned area. Best use this to work on STL's</p> <pre><code>from openscad import *\n# One Cube\nc=cube([2,2,5])\n# this pulls from inside the cube 5 into z direction. New height of the cube is 10.\nd=pull(c,[1,1,1],[0,0,5])\nd.show()\n</code></pre>"},{"location":"python_new/#signed-distance-functions-within-openscad","title":"Signed distance Functions within OpenSCAD","text":"<p>No need to create SDF objects in other tools and import into OpenSCAD after. Thanks to embedded libfive this can be done online. Watch this small sample to get an idea, how easy it is:</p> <pre><code>from openscad import *\nfrom pylibfive import *\n# Just assemble you libfive object first\nc=lv_coord()\ns1=lv_sphere(lv_trans(c,[2,2,2]),2)\nb1=lv_box(c,[2,2,2])\nsdf=lv_union_smooth(s1,b1,0.6)\n# And mesh it finally to get something, that openSCAD can display\nfobj=frep(sdf,[-4,-4,-4],[4,4,4],20)\nshow(fobj)\n</code></pre> <p>On a lower level, SDF used a formula and creates surfaces in the area, where this function hits zero. All functions, which are provided by libfive are also available in openSCAD. These are</p> <pre><code>import libfivew as lv\nlv.x() # returns x coodinate\nlv.y() # returns y coodinate\nlv.z() # returns z coodinate\nlv.sqrt(x)\nlv.square(x)\nlv.abs(x)\nlv.max(x,y)\nlv.min(x,y)\nlv.sin(x)\nlv.cos(x)\nlv.tan(x)\nlv.asin(x)\nlv.acos(x)\nlv.atan(x)\nlv.exp(x)\nlv.log(x)\nlv.pow(x)\nlv.comp(a,b)\nlv.atan2(x,y)\nlv.print(formula) # print tree of formula\n</code></pre>"},{"location":"python_new/#align","title":"align","text":"<p>Align can be used to combine combjects together without difficult  transformations</p> <pre><code>from openscad import *\nc = cube()\nc1 = c\n# scale with -1 will also invert the directions of all handles, so the objects will be abutting instead of coincident\nc2 = c.align(scale(c1.origin,-1), c.origin)\nshow(c1 | c2)\n</code></pre>"},{"location":"python_new/#edge","title":"edge","text":"<p>Python has a new primitive called \"edge\" which just has a length</p> <pre><code>from openscad import *\ne = edge(size=10, center=True)\n# and of course you can extrude it\nsquare = linear_extrude(height=10)\n# or get back the edges in a python list\nall_e = square.edges()\n</code></pre>"},{"location":"python_new/#faces","title":"faces","text":"<p>You can retrieve a list of faces for any solid in a python list</p> <p><pre><code>from openscad import *\nc = cube(10)\n# returns a list of 6 faces\nfaces = c.faces()\n</code></pre> note that objects returned by faces (and edges) have a property called 'matrix'  which is a 4x4 eigen matrix which shows their orientation in space.  it can be used to filter them</p>"},{"location":"python_new/#export","title":"export","text":"<p>You can use this to export your data to disk programmatically like so:</p> <pre><code>from openscad import *\nc = cube(10)\ncyl = cylinder(r=4,h=4)\nc.export(\"mycube.stl\")\n# with 3mf format you can even store many objects at once\nexport( {\n\"cube\" : c,\n\"cylinder\" : cyl\n},\"myfile.3mf\")\n</code></pre>"},{"location":"python_new/#spline","title":"spline","text":"<p>Spline is like 'polygon'  just with the difference, that the resulting object is very round and will meet the given points</p> <pre><code>from openscad import *\ns = spline([[0,0],[10,0],[10,10],[0,10])\ns.show() # very near to circle\n</code></pre>"},{"location":"python_new/#skin","title":"skin","text":"<p>Thanks to scrameta, pythonscad got wonderful skin. skin is like you put arbritary 2d objects in space and skin will cover all of them tightly</p> <p>u This is basically morphing a square into a circle</p>"},{"location":"python_new/#add_parameter","title":"add_parameter","text":"<p>This is how pythonscad can interact with the customizer</p> <pre><code>from openscad import *\n# This will add an entry for myvar in customnizer with default value of 5\nadd_parameter(\"myvar\",5)\n</code></pre>"},{"location":"python_new/#concat","title":"concat","text":"<p>Concat concatenates the triangles and vertices of serveral objects without actually createing an Union operation on them. This is useful when the sub-parts are not yet water-tight and CSG would fail on them.</p> <pre><code>from openscad import *\nalltogether = concat(part1, part2, part3)\n</code></pre>"},{"location":"python_new/#exising-functions-are-improved","title":"exising functions are improved","text":"<p>Some of the existing functions got additional useful parameters</p> <pre><code>* circle gets an angle parameter , so you can easily make pie's\n* same for cylinder, why should it be missing\n* sphere can accept a function which  receives a 3d vector and will output a radius\n* linear_extrude can also extrude a python function. this will get a height and shall return a 2d polygon\n* rotate_extrude can also extrude a python function. this will get a height and shall return a 2d polygon\n* rotate_extrude has a v parameter  , when not [0,0,0] it will do nice helix\n</code></pre>"},{"location":"python_specialities/","title":"Python Specialities","text":""},{"location":"python_specialities/#special-variables","title":"Special Variables","text":"<p>In Python the well known $fn, $fa  and $fs don't exist. Generally there are no $ variables needed as python variables can be overwritten any time. To access $fn, $fa, $fs, simply set global fn, fa, fs variable respectively.</p>"},{"location":"python_specialities/#import-existing-files","title":"Import existing files","text":"<p>'import()' cannnot be reused in python-openscad as its a python keyword. use 'osimport()' instead.</p>"},{"location":"python_specialities/#storing-data-along-solids","title":"Storing Data along Solids","text":"<p>Its possible to store arbritary data along with solids</p> Python <pre><code>from openscad import *\n# Create the cube object, and store it in variable \"c\"\nc = cube([10,10,2])\n# give it a name\nc['name']=\"Fancy cube\"\n# specify coordinates\nc['top_middle']=[5,5,2]\n# alternatively same effect has\nc.top_middle'=[5,5,2]\n# Display the cube\nshow(c)\n# Retrieve  Data\nprint(\"The Name of the Cube is \"%(c['name']))\n</code></pre>"},{"location":"python_specialities/#object-handles","title":"Object handles","text":"<p>Special application of storing data with objects are handles, which are 4x4 Eigen matrices. Each object has a handle called 'origin' which is identity matrix at first.  You can use all the transformations to objects and also to handles like so:</p> Python <pre><code>from openscad import *\nc=cube([10,10,10])\n# translate the origin with an offset, so top_center sits on top of the cube\nc.top_center=translate(c.origin,[5,5,10])\n# This one even points to the right side\nc.right_center=translate(roty(c.origin,90),10,5,5)\n# The handles can be used with align\ncyl = cylinder(d=1,h=2)\n# This placecs cyl onto the right side of the cube - of course rotated\n#    obj       source handle  dest handle\nc |= cyl.align(c.right_center,cyl.origin)\n</code></pre>"},{"location":"python_specialities/#object-oriented-coding-style","title":"Object oriented coding style","text":"<p>Most of the Object manipulation function are available in two different flavors: functions and methods.</p> Python <pre><code>from openscad import *\n# Create a green cylinder with functions\ncy=cylinder(r=2,h=10)\ncy_green=color(cy,\"green\")\n# or more simple:\n# cy_green = color(cylinder(r=2,h=10),\"green\")\n# Now create a red sphere with methods\nsp=sphere(r=2)\nsp_red = sp.color(\"red\")\n# or more simple:\n# sp_red = sphere(r=2).color(\"red\")\n# method flavor deems to be more readble \n# Now show everything\n# use solids in lists to implicitely union them\nshow([sp_red, cy_green.translate([10,0,0] )\n# here is yet another method ....\n</code></pre>"},{"location":"python_together/","title":"Python together with OpenSCAD","text":"<p>Very likely you don't want to give up the amazing libraries with exist in OpenSCAD language only. Just use them. Its very simple to mix OpenSCAD and python language.</p> <p>For that just write 'use'  pythonfile.py in your OpenSCAD script. Then you will be able to use your beloved libraries and at the same time  make use of your Python scripts.</p> <p>Check out this sample:</p> OpenSCADPython <pre><code>// Traditionally use was used to source content from other files which are not on the very toplevel, like modules\n// use &lt;file.scad&gt; --- this will only load things defined in the file (OpenSCAD modules)\n// include &lt;file.scad&gt; --- this will also execute OpenSCAD code, which is sitting the the root of the sourced file\n// now with this fork you can simple type\nuse &lt;pythonlib.py&gt;\n// and call functions like\necho(python_add(1,2));\n// or call modules like this\npython_cube(3);\n// but you can also just call a python function with\nmy_python_func(\"message\")\n</code></pre> <pre><code>from openscad import *\n# this is file pythonlib.py and it defines the python functions referred above\ndef python_add(a,b):\nreturn a+b\ndef python_cube(size): # you could use any number of parameters\n# numbers, strings and even arrays are supported\nreturn cube([size,size,1]) # My special sizing requirement\ndef my_python_func(text):\nfd=fopen(\"myfile\",\"w\")\n# you could write text to this file if you wanted\n# just dont return a solid here as you dont have one...\n</code></pre> <p>Of course you can also use SCAD from within python</p> Python <pre><code>from openscad import *\nobj = scad(\"\"\"\n   union()\n   {\n     cube([10,10,10]);\n     cylinder(d=1,h=10);\n   }\n \"\"\"\nobj.show()\n</code></pre> <p>Apart from different syntax, pythonscad  also provides some additional functions compared to OpenSCAD here.</p>"}]}